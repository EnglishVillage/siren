/**
 * Copyright (c) 2014, Sindice Limited. All Rights Reserved.
 *
 * This file is part of the SIREn project.
 *
 * SIREn is a free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * SIREn is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.sindicetech.siren.qparser.keyword.processors;

import com.sindicetech.siren.qparser.keyword.KeywordSyntaxParser;
import com.sindicetech.siren.qparser.keyword.builders.KeywordQueryTreeBuilder;
import com.sindicetech.siren.search.node.TwigQuery;
import org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler;
import org.apache.lucene.queryparser.flexible.core.processors.NoChildOptimizationQueryNodeProcessor;
import org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor;
import org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorPipeline;
import org.apache.lucene.queryparser.flexible.core.processors.RemoveDeletedQueryNodesProcessor;
import org.apache.lucene.queryparser.flexible.standard.processors.*;
import org.apache.lucene.search.Query;

/**
 * This pipeline has all the processors needed to process a query node tree,
 * generated by {@link KeywordSyntaxParser}, already assembled.
 *
 * <p>
 *
 * The order they are assembled affects the results.
 *
 * <p>
 *
 * This processor pipeline was designed to work with
 * {@link com.sindicetech.siren.qparser.keyword.config.ExtendedKeywordQueryConfigHandler}.
 *
 * <p>
 *
 * The result query node tree can be used to build a {@link Query} object using
 * {@link KeywordQueryTreeBuilder}.
 *
 * <p>
 *
 * This is a modification of the original
 * {@link StandardQueryNodeProcessorPipeline} which adds a
 * {@link ChangeDefaultOperatorNodeProcessor} in order to correctly support
 * unary operators (SRN-106). Furthermore, it removes the field expansion
 * {@link MultiFieldQueryNodeProcessor}, and also the {@link BoostQueryNodeProcessor}
 * since it considers fields (GH-75). Several {@link QueryNodeProcessor} were
 * added to the {@link TwigQuery} syntax of the {@link KeywordSyntaxParser}.
 *
 * @see KeywordQueryTreeBuilder
 * @see com.sindicetech.siren.qparser.keyword.config.ExtendedKeywordQueryConfigHandler
 * @see KeywordSyntaxParser
 */
public class KeywordQueryNodeProcessorPipeline extends QueryNodeProcessorPipeline {

  public KeywordQueryNodeProcessorPipeline(final QueryConfigHandler queryConfig) {
    super(queryConfig);

    this.add(new TopLevelQueryNodeProcessor());
    this.add(new AllowTwigProcessor());
    this.add(new WildcardNodeQueryNodeProcessor());
    this.add(new RootLevelTwigQueryNodeProcessor());
    this.add(new ChangeDefaultOperatorNodeProcessor());
    // QNamesProcessor must be before the DatatypeProcessor as it can modify the datatype label
    this.add(new QNamesProcessor());

    this.add(new WildcardQueryNodeProcessor());
    this.add(new FuzzyQueryNodeProcessor());
    this.add(new PhraseQueryNodeProcessor());
    this.add(new OpenRangeQueryNodeProcessor());

    // assign datatype to query nodes
    this.add(new DatatypeProcessor());
    // assign query type to query nodes
    this.add(new QueryTypeProcessor());
    // transfer span slop to boolean query nodes
    this.add(new SpanGroupQueryProcessor());

    // this processor creates a NodeNumericRangeQuery from a FieldQueryNode,
    // with both bounds equal. This is why it is before DatatypeAnalyzerProcessor
    this.add(new NodeNumericQueryNodeProcessor());
    this.add(new NodeNumericRangeQueryNodeProcessor());
    this.add(new TermRangeQueryNodeProcessor());
    this.add(new LowercaseExpandedTermsQueryNodeProcessor());
    this.add(new DatatypeAnalyzerProcessor());
    this.add(new PhraseSlopQueryNodeProcessor());
    this.add(new DefaultPhraseSlopQueryNodeProcessor());

    this.add(new AllowFuzzyAndWildcardProcessor());
    this.add(new AllowLeadingWildcardProcessor());

    this.add(new GroupQueryNodeProcessor());
    /*
     * TODO GroupQueryNodeProcessor is deprecated in Lucene4.0 in favour to
     * BooleanQuery2ModifierNodeProcessor. Try to apply changes done in SIREn
     * to it.
     */
//    add(new BooleanQuery2ModifierNodeProcessor());

    this.add(new NoChildOptimizationQueryNodeProcessor());
    this.add(new RemoveDeletedQueryNodesProcessor());
    this.add(new RemoveEmptyNonLeafQueryNodeProcessor());
    this.add(new BooleanSingleChildOptimizationQueryNodeProcessor());
    this.add(new MultiNodeTermRewriteMethodProcessor());
    this.add(new NodeBooleanQueryNodeProcessor());
    this.add(new NotSupportedQueryProcessor());
  }

}
