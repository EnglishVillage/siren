[[solr-configuration]]
== Configuration

This section provides information on how to configure the SIREn plugin in a Solr installation, assuming that you have
<<solr-setup, install SIREn>> in your Solr installation. You can find a working example of a Solr configuration for SIREn
in `$SIREN_HOME/example/solr/collection1/conf/`.

[[solr-configuration-json-field-type]]
=== JSON Field Type

SIREn is introducing a new https://cwiki.apache.org/confluence/display/solr/Solr+Field+Types[field type] that can be
used to index and query tree-structured data. There are two field
types available, `ExtendedTreeField` and `ConciseTreeField`, which depend on which kind of
<<json-indexing-models, indexing model>> you want to use.

Each of the field types is associated to a tokenizer factory
for JSON data, respectively `ExtendedJsonTokenizerFactory` for the `ExtendedTreeField` and `ConciseJsonTokenizerFactory`
for the `ConciseTreeField`.

To configure such a field type, you have to add the following entries to the Solrâ€™s `schema.xml` located in
`$SOLR_HOME/example/solr/collection1/conf/`. In this example, we will configure a field type named `json`
using the `ConciseTreeField` and the `ConciseJsonTokenizerFactory` classes as follow:

[source,markup]
----
<types>
...
    <fieldType name="json"
               class="com.sindicetech.siren.solr.schema.ConciseTreeField"
               omitNorms="true"
               datatypeConfig="datatypes.xml">

        <analyzer type="index">
            <tokenizer class="com.sindicetech.siren.solr.analysis.ConciseJsonTokenizerFactory"/>
        </analyzer>

    </fieldType>
...
</types>
----

The definition of a tree field type requires the parameter `datatypeConfig`. This setting indicates a configuration
file, named `datatypes.xml` in this example, that must be located in `$SOLR_HOME/example/solr/collection1/conf/`.

Given the nature of the field type, it is recommended to disable norms by setting the parameter `omitNorms` to `true`.

[float]
===== Concise JSON Field Type

The concise tree field accepts an optional parameter `attributeWildcard` that can be used to enable or disable attribute
wildcard queries. By default, this parameter is set to `false`.

If the attribute wildcard setting is disabled, a node query will always expect an ``attribute'' property:

[source,javascript]
--------------------------------------------------
{
   "node" : {
       "attribute" : "PostTown",
       "query" : "Norwich"
   }
}
--------------------------------------------------

The following query is only valid if the attribute wildcard has been enabled:

[source,javascript]
--------------------------------------------------
{
   "node" : {
       "query" : "Norwich"
   }
}
--------------------------------------------------

[[solr-configuration-json-field]]
=== JSON Field

Assuming that a `json` field type has been configured as explained previously, you can define one or more fields of type
`json` in your `schema.xml` as follows:

[source,markup]
----
<fields>
...
    <field name="json" type="json" indexed="true" stored="false"/>
...
</fields>
----

This field can be used to index and query JSON data.

[[solr-configuration-datatype]]
=== Datatype

It is possible to configure the analyzers used by SIREn for each <<analysis-and-datatypes, datatype>> in the
`datatypes.xml` configuration file located in `$SOLR_HOME/example/solr/collection1/conf/`.

This example shows the definition of the datatype `json:field`, and is configured to use a whitespace tokenizer
with a lowercase filter at index and query time.

[source,markup]
----
<datatypeConfig name="example" version="0.2.2">
...
    <datatype name="http://json.org/field" class="com.sindicetech.siren.solr.schema.TextDatatype">
        <analyzer type="index">

            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>

        </analyzer>
        <analyzer type="query">

            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>

        </analyzer>
    </datatype>
...
</datatypeConfig>
----

A datatype is defined using the `datatype` element. This element requires two parameters: `name` and `class`.
The `name` parameter specifies a unique name for the datatype, while the `class` parameter specifies the datatype
implementation to use. In this example, we use the datatype implementation `com.sindicetech.siren.solr.schema.TextDatatype`
which is made for configurable text analysis.

The rest of the definition of the dataype is about analysis. The syntax and semantics of defining analysis for datatypes
is exactly the same as for Solr field types. You can read more on
https://cwiki.apache.org/confluence/display/solr/Understanding+Analyzers%2C+Tokenizers%2C+and+Filters[Understanding Analyzers, Tokenizers and Filters].

Another datatype implementation is available, `com.sindicetech.siren.solr.schema.TrieDatatype`, which is made for numerical
value analysis. The following example shows the definition of the `xsd:long` datatype.

[source,markup]
----
<datatypeConfig name="example" version="0.2.2">
...
    <datatype name="http://www.w3.org/2001/XMLSchema#long"
              class="com.sindicetech.siren.solr.schema.TrieDatatype"
              precisionStep="8"
              type="long"/>
...
</datatypeConfig>
----

This datatype implementation requires two parameters: `type` and `precisionStep`. The `type` parameter specifies the
type of the numerical values: `integer`, `long`, `float`, `double`. The `precisionStep` specifies the precision of the
numerical value indexing. These parameters have the same semantics than for the `TrieField` of Solr.

[[solr-configuration-codec]]
=== SIREn's Codec

SIREn is using a custom postings format and needs to be registered in Solr. This is done automatically by the
built-in `SchemaCodecFactory` of Solr. You have to ensure that this codec factory is properly registered in the
`solrconfig.xml` by including the following setting:

[source,markup]
----
  <codecFactory class="solr.SchemaCodecFactory"/>
----

[[solr-configuration-query-parser]]
=== Query Parser

To register the tree query parser of SIREn, you need to add the following entries into the `solrconfig.xml`
file located at `$SOLR_HOME/example/solr/collection1/conf/`.

[source,markup]
----
<queryParser name="tree" class="com.sindicetech.siren.solr.qparser.tree.TreeQParserPlugin">   <1>
    <str name="qnames">qnames.txt</str>                                                   <2>
</queryParser>

<requestHandler name="/tree" class="solr.SearchHandler">                                  <3>
    <lst name="defaults">
        <str name="defType">json</str>                                                    <4>
        <str name="fl">id</str>                                                           <5>
        <str name="df">json</str>                                                         <6>
    </lst>
</requestHandler>
----
<1> Register the SIREn's tree query parser plugin under the name `tree`
<2> Specify the path to the QName mappings file
<3> Register the tree query handler under `/tree`
<4> Specify the query parser plugin to use, here `tree`
<5> Specify the default field retrieved
<6> Specify the default search field

[[solr-configuration-qname]]
=== QName

The SIREn's query parser can be configured with a set of qname mappings. These qname mappings are useful to
write more concise queries when using Uniform Resource Identifiers. For example, the core JSON datatypes
are identified using URI, e.g., `http://json.org/field` or `http://www.w3.org/2001/XMLSchema#long`. A qname
mapping `xsd : http://www.w3.org/2001/XMLSchema#` will allow you to write `xsd:long` instead of the full URI.

The qname mappings are configured in the qnames.txt file located at `$SOLR_HOME/example/solr/collection1/conf/`.
The file contains one key-value pair per line, the key being the qname and the value the namespace associated to this
qname. The following example shows how to register two qnames:

[source,plain]
--------------------------------------------------
json=http://json.org/
xsd=http://www.w3.org/2001/XMLSchema#
--------------------------------------------------