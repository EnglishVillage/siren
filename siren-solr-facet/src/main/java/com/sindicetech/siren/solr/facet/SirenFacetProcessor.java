/**
 * Copyright (c) 2014, Sindice Limited. All Rights Reserved.
 *
 * This file is part of the SIREn project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.sindicetech.siren.solr.facet;

import static org.apache.solr.common.SolrException.ErrorCode.BAD_REQUEST;

import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.solr.common.SolrException;
import org.apache.solr.common.SolrInputDocument;
import org.apache.solr.core.SolrCore;
import org.apache.solr.schema.IndexSchema;
import org.apache.solr.schema.SchemaField;
import org.apache.solr.update.AddUpdateCommand;
import org.apache.solr.update.processor.UpdateRequestProcessor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Enriches each {@link SolrInputDocument} with fields generated by the {@link SirenFieldFacetExtractor} for
 * the document. Updates Schema accordingly.
 * 
 * See {@link SirenFacetProcessorFactory} for how to configure the processor to be used during
 * indexing.
 * 
 * @see SirenFacetProcessorFactory
 * @experimental Can change in the next release.
 * 
 */
public class SirenFacetProcessor extends UpdateRequestProcessor {
  public static final int DEFAULT_MAX_FACET_VALUE_LENGTH = 80;
  private final static Logger logger = LoggerFactory.getLogger(SirenFacetProcessor.class);
  private final SirenFieldFacetExtractor extractor = new SirenFieldFacetExtractor();

  protected List<TypeMapping> typeMappings;

  public SirenFacetProcessor(UpdateRequestProcessor next, List<TypeMapping> typeMappings) {
    super(next);

    this.typeMappings = typeMappings;
  }

  @Override
  public void processAdd(AddUpdateCommand cmd) throws IOException {
    SolrCore core = cmd.getReq().getCore();
    IndexSchema schema = core.getLatestSchema();

    if (!schema.isMutable()) {
      throw new SolrException(BAD_REQUEST, String.format(
          "This IndexSchema, of core %s, is not mutable.", core.getName()));
    }

    SolrInputDocument doc = cmd.getSolrInputDocument();

    extractor.setSchema(schema);
    List<SirenFacetEntry> entries = extractor.extractFacets(doc);

    // update schema
    // use Sets so that we add a fieldname only once even if it is generated multiple times (for
    // multiple paths)
    Set<SchemaField> newFields = new HashSet<SchemaField>();
    for (SirenFacetEntry entry : entries) {
      // skip entry if the field is already in the schema
      if (schema.getFieldOrNull(entry.toFieldName()) != null) {
        continue;
      }

      TypeMapping typeMapping = getTypeMappingValueClass(entry.datatype.xsdDatatype);
      
      // skip facet values that are too large altogether - they don't make sense for faceting 
      if (entry.value instanceof String && ((String)entry.value).length() > 
          (typeMapping.maxFieldSize != null ? typeMapping.maxFieldSize : DEFAULT_MAX_FACET_VALUE_LENGTH)) {
        continue;
      }

      String fieldTypeName = getTypeMappingValueClass(entry.datatype.xsdDatatype).fieldType;

      Map<String, Boolean> options = new HashMap<String, Boolean>();
      // see FieldProperties.propertyNames[]
      options.put("indexed", false);
      options.put("stored", false);
      options.put("docValues", true);
      options.put("multiValued", true);

      newFields.add(schema.newField(entry.toFieldName(), fieldTypeName, options));
    }

    if (!newFields.isEmpty()) {
      IndexSchema newSchema = schema.addFields(newFields);
      cmd.getReq().getCore().setLatestSchema(newSchema);
      cmd.getReq().updateSchemaToLatest();
      logger.debug("Successfully added field(s) to the schema.");
    }

    // update document
    for (SirenFacetEntry entry : entries) {
      TypeMapping typeMapping = getTypeMappingValueClass(entry.datatype.xsdDatatype);
      
      // skip facet values that are too large altogether - they don't make sense for faceting 
      if (entry.value instanceof String && ((String)entry.value).length() > 
          (typeMapping.maxFieldSize != null ? typeMapping.maxFieldSize : DEFAULT_MAX_FACET_VALUE_LENGTH)) {
        continue;
      }
      
      doc.addField(entry.toFieldName(), entry.value);
    }

    // call the next one in chain
    super.processAdd(cmd);
  }

  public TypeMapping getTypeMappingValueClass(String valueClass) {
    for (TypeMapping mapping : typeMappings) {
      if (mapping.valueClasses.contains(valueClass)) {
        return mapping;
      }
    }

    return null;
  }
}
